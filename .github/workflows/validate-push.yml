# This is a basic workflow to help you get started with Actions

name: SPASE Push Validation

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: push
#  push:
#    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "validate"
  validate:
    name: Validation and referential check
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Install spase-resource-tools
      - uses: actions/setup-node@v1
      - run: npm install
      - name: Install SPASE-Resource-tools
        run: npm install -g spase-resource-tools

       # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Find files that have changed
      - name: Find changed files
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: |
            **/*.xml
          SEPARATOR: ' '

      # Prepare for logs
      - name: Prepare Log directory
        run: mkdir -p logs

      # Check only the source codes that have differences
      # Check descriptions for schema conformance
      #  if: env.GIT_DIFF
      - name: Schema compliance ...
        run: |
          echo "Schema compliance ..." > logs/validate.log
          for f in $(echo ${{ env.GIT_DIFF }}); do spase-validate $f; done >> logs/validate.log

      # Check references
      #  if: env.GIT_DIFF
      - name: Referential checks ...
        run: |
          echo "" >> logs/validate.log
          echo "Referential checks ..." >> logs/validate.log
          for f in $(echo ${{ env.GIT_DIFF }}); do spase-refcheck -u -i $f; done >> logs/validate.log

      # Upload logs
      #  if: env.GIT_DIFF
      - name: Upload log artifacts
        uses: actions/upload-artifact@v2
        with:
          name: validate-log
          path: logs/validate.log

      # Check if log contains any INVALID items
      - name: Check for invalid items
        run: |
          if [ -f logs/validate.log ]; then
            set +e
            echo -n "Number of invalid files: "
            # Turn off exit code - we handle it differently
            grep -c "^ INVALID:" logs/validate.log
            if [ `grep -c "^ INVALID:" logs/validate.log` -eq 0 ]; then
              echo "No FAILURE found: $?"
              exit 0
            else
              echo "FAILURE found: $?"
              exit 1
            fi
            set -e
          fi
